主旨要求：传输层面（减少请求数，降低请求量）执行层面（减少重绘&回流）

传输层面的从来都是优化的核心点，而这个层面的优化要对浏览器有一个基本的认识，比如：
① 网页自上而下的解析渲染，边解析边渲染，页面内CSS文件会阻塞渲染，异步CSS文件会导致回流
② 浏览器在document下载结束会检测静态资源，新开线程下载（有并发上限），在带宽限制的条件下，无序并发会导致主资源速度下降，从而影响首屏渲染
③ 浏览器缓存可用时会使用缓存资源，这个时候可以避免请求体的传输，对性能有极大提高
衡量性能的重要指标为首屏载入速度（指页面可以看见，不一定可交互），影响首屏的最大因素为请求，所以请求是页面真正的杀手，一般来说我们会做这些优化：

减少请求数
① 合并样式、脚本文件
② 合并背景图片
③ CSS3图标、Icon Font

降低请求量
① 开启GZip
② 优化静态资源，jQuery->Zepto、阉割IScroll、去除冗余代码
③ 图片无损压缩
④ 图片延迟加载
⑤ 减少Cookie携带

采用类似“时间换空间、空间换时间”的做法，比如：
① 缓存为王，对更新较缓慢的资源&接口做缓存（浏览器缓存、localsorage、application cache这个坑多）
② 按需加载，先加载主要资源，其余资源延迟加载，对非首屏资源滚动加载
③ fake页技术，将页面最初需要显示Html&Css内联，在页面所需资源加载结束前至少可看，理想情况是index.html下载结束即展示（2G 5S内）
④ CDN
